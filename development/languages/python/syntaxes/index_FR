##########################
Syntaxe du language Python
##########################

.. contents:: Sommaire

Some basic usefull concept and syntax.


Lambda, map, filter, reduce
===========================

Lambda
------

Definition d'une fonction en une ligne avec le mot clef lambda.

::

    f = lambda x, y : x + y
 
    # equivalent à 

    def f(x,y):
        return x+y

map
---

Applique une fonction a chaque membre d'un liste

::

    final_list = map(f, initial_list)

    # equivalent à

    final_list = []
    for x in initial_list:
        final_list.append(f(x))


filter
------

Filtre une liste selon une fonction.

::

    final_list = filter(f, initial_list)

    # equivalent à

    final_list = []
    for x in initial_list:
        if f(x):
            final_list.append(x)

reduce
------

Un peu plus complexe a comprendre en voyant le code.
L'idée de lancer le fonction sur les deux premiers elements,
puis entre le resultat et l'element suivant, ainsi de suite jusqu'a avoir fait tous les elements.

Cas particulier : 0 element => erreur, 1 element retourne l'element sans traitement.


::

    result = reduce(f, initial_list)

    # equivalent à

    final_list = []
    if len(inital_list) == 0:
        raise Exception('Empty sequence with no initial value')
    elif len(inital_list) == 0:
        result = inital_list[0]
    else:
        result = f(inital_list[0], inital_list[1])
        for elem in initial_list[:2]:
            result = f(result, elem)


List comprehesions
==================

C'est une syntaxe en une ligne pour faire une liste a partir d'un simple boucle avec eventuelement un test.


Simple boucle
-------------

::

    my_list =  [x for x in xrange(10)]

    # equivalent à

    my_list = []
    for x in range(10):
        new_list.append(x)

Ajout d'une fonction de traitement
----------------------------------

::

    my_list =  [f(x) for x in xrange(10)]

    # equivalent à

    my_list = []
    for x in range(10):
        new_list.append(f(x))


Ajout d'un test
---------------

Ce test est appelé "predicate" en anglais.

::

    my_list =  [f(x) for x in xrange(10) if x%2 == 0 ]

    # equivalent à

    my_list = []
    for x in range(10):
        if x%2 == 0 :
            new_list.append(f(x))


Iterateur
=========

Utilisation de yield pour creer des itérateurs.

::

    import random

    def table_random(nb_elem, value_max):
        for i in range(nb_elem):
            yield random.randint(1, value_max)

    for valeur_de6 in table_random(4, 6):
        print("valeur de = %s " valeur_de6)



