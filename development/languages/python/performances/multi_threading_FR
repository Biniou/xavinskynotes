##############
MultiThreading
##############

.. contents:: Sommaire

Threads
=======

Juste un thread
---------------

Vous avez besoin de lancer un unique traitement en parrelle, sans avoir a le surveiller.

::

    thread.start_new_thread ( function, args[, kwargs] )

Threading Module
----------------

Pour lancer plusieurs threads et les controler plus finement.

On utilisera la classe Thread.

Les methodes a connaître sont :

    * start() : creer un thread et lui fait executer run()
    * run() : A surcharger : Ce que va faire le thread.
    * join([time]) : Attend la fin d'un thread.


::

    import threading
    import time

    class myThread (threading.Thread):
        def __init__(self, name):
            """ exemple surcharge du constructeur (facultatif) """
            threading.Thread.__init__(self)
            self.name = name
        def run(self):
            """ exemple surcharge run """
            print "Start " + self.name
            time.sleep(0.1)
            print "End " + self.name

    # Create new threads
    thread1 = myThread(1, "Thread-1", 1)
    thread2 = myThread(2, "Thread-2", 2)
    threads = [thread1, thread2]

    # Start new Threads
    thread1.run()
    thread2.run()

    # Attent la fin des threads
    for t in threads:
        t.join()


Quelques fonction utiles ::

    # Nombre de thread actifs
    threading.activeCount()

    # Nombre de thread actuellement controlés.
    threading.currentThread()

    # Liste des thread actifs
    threading.enumerate()

Queue
=====

Queue est une classe de Pile de Stockage que l'on utilise souvent entre les threads.
Ses methodes principales sont :

    * put(item) : ajoute un objet dans la queue. 
    * get() : prend un objet de la queue.
    * qsize() : nb d'objet dans la queue
    * empty() : retourne True si la queue est vide.
    * full(): retourne True if queue is full; otherwise, False.

Exemple ::

    #!/usr/bin/python

    import Queue
    import threading
    import time
    import random

    # un thread qui vide une queue.
    class myThread (threading.Thread):
        def __init__(self, name, my_queue):
            threading.Thread.__init__(self)
            self.name = name
            self.my_queue = my_queue
        def run(self):
            vide_queue(self.my_queue)

    # vidage d'une queue (qui peut être lancé par plusieurs threads)
    def vide_queue(the_queue):
        while True:
            try:
                data = the_queue.get(False)
                time.sleep(0.1)
            except Queue.Empty:
                return
            except:
                print 'Erreur'
                return

    # creation d'une queue et remplissage
    def create_queue(nb_elems):
        my_queue = Queue.Queue()
        for i in range(nb_elems):
            my_queue.put(random.randint(1, 1000))
        return my_queue


    def test_queue(nb_elems, nb_thread):
        time_start = time.time()
        # création de la queue
        the_queue =  create_queue(nb_elems)
        # creation des threads.
        threads = []
        for i in range(nb_thread):
            threads.append(myThread("Thread %s" % i, the_queue))
        # Demarre les threads
        for t in threads:
            t.start()
        # Attend que les threads soient termines
        for t in threads:
            t.join()
        time_stop = time.time()
        print "%s elems traites par %s thread en %0.2f secondes" % \
              (nb_elems, nb_thread, time_stop-time_start)

    nb_elems = 40
    test_queue(nb_elems, 5)
    test_queue(nb_elems, 10)
    test_queue(nb_elems, 20)


Semaphore
=========

Suite a mon utilisation partagé de la mémoire avec des threads,
je doit protéger certains accès avec des semaphore.

Rien de plus facile avec python.

On défini quelque part en global ::

    import threading
    mysemaphore=threading.Semaphore()

On utilise ainsi ::

    mysemaphore.acquire()
    # code protégé
    mysemaphore.release()

    # On peut aussi gérer des accès non bloquant :
    if mysemaphore.acquire(false):
        # code protégé
        mysemaphore.release()
    else:
        # ressourse occupé, on ne fait rien.

