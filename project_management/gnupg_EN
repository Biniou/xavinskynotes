#####
GnuPG
#####

.. contents:: Table of Contents


Free PGP implementation. Create your keys, and numeric sign what you want.

Install
-------

Install on Debian::

    aptitude install gnupg signing-party


Create PGP keys
---------------

The command have a lot of answer.

Command and interaction ::

    # gpg --gen-key

    Please select what kind of key you want:
       (1) RSA and RSA (default)
       (2) DSA and Elgamal
       (3) DSA (sign only)
       (4) RSA (sign only)
    Your selection? 1
    RSA keys may be between 1024 and 4096 bits long.
    What keysize do you want? (2048) 4096
    Requested keysize is 4096 bits
    Please specify how long the key should be valid.
	     0 = key does not expire
	  <n>  = key expires in n days
	  <n>w = key expires in n weeks
	  <n>m = key expires in n months
	  <n>y = key expires in n years
    Key is valid for? (0) 
    Key does not expire at all
    Is this correct? (y/N) y

    You need a user ID to identify your key; the software constructs the user ID
    from the Real Name, Comment and Email Address in this form:
	"Heinrich Heine (Der Dichter) <heinrichh@duesseldorf.de>"

    Real name: <your name>
    Email address: <your email>
    Comment: <your pseudo>
    You selected this USER-ID:
	"<your name> (<your pseudo) <<your email>>"

    Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
    You need a Passphrase to protect your secret key.

    We need to generate a lot of random bytes. It is a good idea to perform
    some other action (type on the keyboard, move the mouse, utilize the
    disks) during the prime generation; this gives the random number
    generator a better chance to gain enough entropy.

    gpg: /home/<your_user>/.gnupg/trustdb.gpg: trustdb created
    gpg: key 12345678 marked as ultimately trusted
    public and secret key created and signed.

    gpg: checking the trustdb
    gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
    gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
    pub   4096R/12345678 2012-11-19
	  Key fingerprint = XXXX XXXX XXXX XXXX XXXX  XXXX XXXX XXXX XXXX XXXX
    uid                  <your name> (<your pseudo) <<your email>>
    sub   4096R/12345678 2012-11-19


I changed the result with a pseudo keyID : 12345678.

Here, 12345678 is the identifier for pgp key. You can have multiple keys.

I you use a Passphrase, you will need use it each time you will sign.
Then it's a protection more, but can be quickly boring.
For coding, I use one without passphrase, and other with for important documents.

gpg command can store public and private key, or public only key.
they are stored in the ~/.gnupg folder.

Use PGP
-------

Syntax ::

    # list all keys.
    gpg --list-keys

    # show fingerprint
    gpg -v --fingerprint 12345678

    # useful for signing party Debian.
    # prepare a page with a lot of cell with your public key information.
    gpg-key2ps -p a4 12345678 > pgp_public_to_print.ps

    # publish you public key on pgp.net
    # WARNING : you can't remove keys in wwwkeys.pgp.net .
    gpg --keyserver wwwkeys.pgp.net --send-key 12345678

    # import a signature by 87654321 and publish it.
    gpg --import 12345678-signedBy-87654321.asc
    gpg --keyserver wwwkeys.pgp.net --send-key 12345678

    # get the public key.
    gpg --keyserver wwwkeys.pgp.net --recv-keys AAAAAAAA 
    # verify the public key.
    gpg --fingerprint AAAAAAAA 
    # sign the public key.
    gpg --sign-key AAAAAAAA 
    # export the signature in a ascii file.
    gpg --armor --output AAAAAAAA-signedBy-12345678.asc --export AAAAAAAA

